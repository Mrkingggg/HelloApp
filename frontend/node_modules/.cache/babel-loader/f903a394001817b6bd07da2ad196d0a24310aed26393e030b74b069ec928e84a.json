{"ast":null,"code":"var _jsxFileName = \"/Volumes/D/BU_Courses/2024Spring/ec530/HelloApp/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { response } from 'express';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cors = require('cors');\nconst express = require('express');\nconst app = express();\napp.use(cors());\nfunction App() {\n  _s();\n  // 定义状态：数据（message）、加载状态（isLoading）和错误状态（error）\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // 数据请求开始时，设置加载状态为true，错误状态清空\n    setIsLoading(true);\n    setError(null);\n    fetch('http://127.0.0.1:5000/api/users/hello').then(response => {\n      if (!response.ok) {\n        // 如果响应状态不是2xx，抛出错误\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      // 数据加载成功，设置消息状态，加载状态为false\n      setMessage(data.hello);\n      setIsLoading(false);\n    }).catch(error => {\n      // 捕获到错误时，设置错误状态，加载状态为false\n      console.error('Error fetching data:', error);\n      setError(error.toString());\n      setIsLoading(false);\n    });\n  }, []);\n\n  // 根据不同状态渲染不同UI\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  } else if (error) {\n    // 当有错误发生时，显示错误信息\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  } else {\n    // 数据加载成功且无错误时，显示消息\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n}\n_s(App, \"ikqSsHsRqoQcuKlq//hZE0NSIyA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","response","jsxDEV","_jsxDEV","cors","require","express","app","use","App","_s","message","setMessage","isLoading","setIsLoading","error","setError","fetch","then","ok","Error","json","data","hello","catch","console","toString","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Volumes/D/BU_Courses/2024Spring/ec530/HelloApp/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { response } from 'express';\n\nconst cors = require('cors')\nconst express = require('express')\nconst app = express()\n\napp.use(cors());\nfunction App() {\n  // 定义状态：数据（message）、加载状态（isLoading）和错误状态（error）\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // 数据请求开始时，设置加载状态为true，错误状态清空\n    setIsLoading(true);\n    setError(null);\n\n    fetch('http://127.0.0.1:5000/api/users/hello')\n      .then(response => {\n        if (!response.ok) {\n          // 如果响应状态不是2xx，抛出错误\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        // 数据加载成功，设置消息状态，加载状态为false\n        setMessage(data.hello);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        // 捕获到错误时，设置错误状态，加载状态为false\n        console.error('Error fetching data:', error);\n        setError(error.toString());\n        setIsLoading(false);\n      });\n  }, []);\n\n  // 根据不同状态渲染不同UI\n  if (isLoading) {\n    return <div>Loading...</div>;\n  } else if (error) {\n    // 当有错误发生时，显示错误信息\n    return <div>Error: {error}</div>;\n  } else {\n    // 数据加载成功且无错误时，显示消息\n    return <div>{message}</div>;\n  }\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAClC,MAAME,GAAG,GAAGD,OAAO,CAAC,CAAC;AAErBC,GAAG,CAACC,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC;AACf,SAASK,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACAc,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEdC,KAAK,CAAC,uCAAuC,CAAC,CAC3CC,IAAI,CAACjB,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACkB,EAAE,EAAE;QAChB;QACA,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOnB,QAAQ,CAACoB,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDH,IAAI,CAACI,IAAI,IAAI;MACZ;MACAV,UAAU,CAACU,IAAI,CAACC,KAAK,CAAC;MACtBT,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDU,KAAK,CAACT,KAAK,IAAI;MACd;MACAU,OAAO,CAACV,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CC,QAAQ,CAACD,KAAK,CAACW,QAAQ,CAAC,CAAC,CAAC;MAC1BZ,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAID,SAAS,EAAE;IACb,oBAAOV,OAAA;MAAAwB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B,CAAC,MAAM,IAAIhB,KAAK,EAAE;IAChB;IACA,oBAAOZ,OAAA;MAAAwB,QAAA,GAAK,SAAO,EAACZ,KAAK;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAClC,CAAC,MAAM;IACL;IACA,oBAAO5B,OAAA;MAAAwB,QAAA,EAAMhB;IAAO;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC7B;AACF;AAACrB,EAAA,CA1CQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA4CZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}